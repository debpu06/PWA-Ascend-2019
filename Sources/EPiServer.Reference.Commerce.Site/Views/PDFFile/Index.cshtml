@using EPiServer.Reference.Commerce.Site.Features.Alloy.Models.Media
@model PDFFile

<style>
    #the-canvas-@Model.ContentLink.ToString() {
        border: 1px solid black;
        width: 100%;
    }
</style>

<div id="PDF-@Model.ContentLink.ToString()">
    <script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
    <h2>@Model.Name</h2>
    @if (Model.AllowPrintingSaving)
    {
        <a href="@Url.ContentUrl(Model.ContentLink)" class="btn btn-primary no-print" target="_blank">Download Printable Version [PDF]</a>
    }
    <div oncontextmenu="return false;" id="the-canvas-@Model.ContentLink.ToString()" class="no-print stop-print" style="overflow:auto"></div>

    <script type="text/javascript">
        // If absolute URL from the remote server is provided, configure the CORS
        // header on that server.
        var url = '@ViewBag.FriendlyUrl';//'@Url.ContentUrl(Model.ContentLink)';

        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var pdfjsLib = window['pdfjs-dist/build/pdf'];

        // The workerSrc property shall be specified.
        pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

        // Asynchronous download of PDF
        var loadingTask = pdfjsLib.getDocument(url);

        //url = 'https://github.com/mozilla/pdf.js/blob/master/test/pdfs/tracemonkey.pdf';
        var thePdf = null;
        var scale = @Model.Scale / 100;

        loadingTask.promise.then(function (pdf) {
            thePdf = pdf;
            viewer = document.getElementById('the-canvas-@Model.ContentLink.ToString()');

            for (page = 1; page <= pdf.numPages; page++) {
                canvas = document.createElement("canvas");
                //var canvas = document.getElementById('the-canvas-@Model.ContentLink.ToString()');
                canvas.className = 'pdf-page-canvas';
                viewer.appendChild(canvas);
                renderPage(page, canvas);
            }
        });

        function renderPage(pageNumber, canvas) {
            thePdf.getPage(pageNumber).then(function (page) {
                viewport = page.getViewport(scale);
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                page.render({ canvasContext: canvas.getContext('2d'), viewport: viewport });
            });
        }
    </script>
</div>