@*
    This is the blog comment block frontend view.  It accepts a BlogCommentViewModel model whose data is used to
    fill in view data.
*@
@using System.Web.Mvc
@using System.Web.Mvc.Html
@model EPiServer.Reference.Commerce.Site.Features.Blog.Models.ViewModels.BlogCommentsBlockViewModel
<div>

    <div class="comment-content wow bounceInUp animated">
        <div class="comments-wrapper" id="blogCommentBlock">
            <h3> Comments </h3>
            <!--commentlist-->
            <ul class="commentlist" id="lstBlogComment">
                @foreach (var comment in Model.Comments)
                {
                    <!--comment-->
                <li class="comment">
                    <div class="comment-wrapper">
                        <div class="comment-author vcard">
                            <p class="gravatar">
                                <a href="#"><img width="60" height="60" alt="avatar" src="images/avatar60x60.jpg"></a>
                            </p>
                            <span class="author">@comment.Name</span>
                        </div>
                        <!--comment-author vcard-->
                        @*Thu, Jul 10, 2014 07:27:08 am*@
                        <div class="comment-meta">
                            <time datetime="2014-07-10T07:27:08+00:00" class="entry-date">@comment.Created.ToLocalTime().ToString("ddd, MMM dd, yyyy hh:mm:ss tt")</time>
                            .
                        </div>
                        <!--comment-meta-->
                        <div class="comment-body"> @comment.Body </div>
                    </div>
                </li>

                }
            </ul>
            <!--commentlist-->
            @using (Html.BeginForm("GetComment", "BlogCommentBlock", FormMethod.Get, new { @class = "jsBlogPagingForm" }))
            {
                <input hidden id="pageId" name="PageId" type="text" value="@Model.CurrentPageLink.ID" />
                <input hidden id="pageIndex" name="PageIndex" type="text" />
                <input hidden id="pageSize" name="PageSize" type="text" value="@Model.PagingInfo.PageSize" />
                <div class="pager">
                    <div class="pages">
                        @{
                            double totalPages = Model.PagingInfo.PageCount;
                            int currentPage = Model.PagingInfo.PageIndex;
                        }
                        <ul style="list-style-type: none; margin: 0" class="pagination">
                        @if (totalPages <= 4)
                        {
                            // Display current pages with active page
                            for (int i = 1; i <= totalPages; i++)
                            {
                                if (i == currentPage)
                                {
                                    <li class="active"><a href="#" class="get-blog-comment" pageIndex=@i>@i</a></li>
                                }
                                else
                                {
                                    <li><a href="#" class="get-blog-comment" pageIndex=@i>@i</a></li>
                                }
                            }
                        }
                        else
                        {
                            // Set the Start Point and End Point for Pagination.
                            double start = currentPage / Model.PagingInfo.PageSize * Model.PagingInfo.PageSize;
                            var start2 = start > 0 ? Convert.ToInt32(Math.Floor(start)) : 1;
                            var end = start + Model.PagingInfo.PageSize - 1;
                            var end2 = end > totalPages ? totalPages : end;

                            // Display previous button is current page is not first page
                            if (currentPage != 1)
                            {
                                <li><a href="#" class="get-blog-comment" pageIndex=1>&laquo;</a></li>
                                <li><a href="#" class="get-blog-comment" pageIndex="@(currentPage - 1)">&lsaquo;</a></li>
                            }

                            // Display previous 10 pages button
                            if (currentPage >= Model.PagingInfo.PageSize)
                            {
                                <li><a href="#" class="get-blog-comment" pageIndex="@(start2 - Model.PagingInfo.PageSize > 0 ? start2 - Model.PagingInfo.PageSize : 1)">...</a></li>
                            }

                            // Display current pages with active page
                            for (int i = start2; i <= end2; i++)
                            {
                                if (i == currentPage)
                                {
                                    <li class="active"><a href="#" class="get-blog-comment" pageIndex=@i>@i</a></li>
                                }
                                else
                                {
                                    <li><a href="#" class="get-blog-comment" pageIndex=@i>@i</a></li>
                                }
                            }

                            // Display next 10 pages button
                            if (end2 < totalPages - 1)
                            {
                                <li><a href="#" class="get-blog-comment" pageIndex="@(end2 + 1)">...</a></li>
                            }

                            // Display Next page and Last Page
                            if (Model.PagingInfo.PageIndex <= totalPages - 1)
                            {
                                <li><a href="#" class="get-blog-comment" pageIndex="@(currentPage + 1)">&rsaquo;</a></li>
                                <li><a href="#" class="get-blog-comment" pageIndex="@Model.PagingInfo.PageCount">&raquo;</a></li>
                            }

                        }
                        </ul>
                        <br />
                    </div>
                </div>
            }
        </div>
        <!--comments-wrapper-->
        <div class="comments-form-wrapper clearfix">
            <h3>@Html.Translate("/Blog/Comments/Replu")</h3>
            @using (Html.BeginForm("Submit", "BlogCommentBlock", FormMethod.Post, new { @class = "comment-form" }))
            {
            @Html.HiddenFor(m => m.CurrentPageLink)
            <div class="field">
                <label>Name<em class="required">*</em></label>
                <input type="text" class="input-text" title="Name" id="user" name="Name">
            </div>
            <div class="field">
                <label>Email<em class="required">*</em></label>
                <input type="text" class="input-text" title="Email" id="email" name="Email">
            </div>
            <div class="clear"></div>
            <div class="field aw-blog-comment-area">
                <label for="comment">Comment<em class="required">*</em></label>
                <textarea rows="5" cols="50" class="input-text" title="Comment" id="comment" name="Body"></textarea>
            </div>
            <div class="button-set">
                <input type="hidden" value="1" name="blog_id">
                <button type="submit" class="bnt-comment"><span><span>Add Comment</span></span></button>
            </div>
            }
        </div>
    </div>
</div>


