@using EPiServer.Editor
@using EPiServer.Find
@using EPiServer.Security
@using EPiServer.Find.Api.Facets
@using EPiServer.Framework.Web.Resources
@using System
@model EPiServer.Reference.Commerce.Site.Features.Alloy.ViewModels.FindSearchContentModel

@{
    Layout = "~/Features/Alloy/Views/Shared/Layouts/_TwoPlusOne.cshtml";

    ClientResources.RequireStyle("http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css");
    ClientResources.RequireScript("http://code.jquery.com/jquery-1.9.1.js");
    ClientResources.RequireScript("http://code.jquery.com/ui/1.10.3/jquery-ui.js");
}

<script language="javascript">
        function spellcheck(query, hitsCutoff) {
            $.ajax({
                url: "@Model.PublicProxyPath" + "/_spellcheck?query=" + query + "&size=1&hits_cutoff=" + hitsCutoff,
                dataType: 'jsonp',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.hits != undefined && data.hits[0] != undefined) {
                        var suggestion = data.hits[0].suggestion;
                        if (suggestion != undefined) {
                            document.getElementById("suggestion").innerHTML = "<span style=\"color: red;\">@Html.Translate("/searchpagetemplate/suggestion")</span>" + ": <i><a href=\"/@Model.PageUrl?search=" + suggestion + "\">" + suggestion + "</a></i>";
                        }
                    }
                }
            });
        }
        function relatedQuery(query, hitsCutoff) {
            $.ajax({
                url: "@Model.PublicProxyPath" + "/_didyoumean?query=" + query + "&size=3&hits_cutoff=" + hitsCutoff,
                dataType: 'jsonp',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.hits != undefined && data.hits[0] != undefined) {
                        var list = [];
                        var listStats = [];
                        for (var hit in data.hits) {
                            if(data.hits[hit].type == 'statistical')
                            {
                                listStats.push("<i><a href=\"/@Model.PageUrl?search=" + data.hits[hit].suggestion + "\">" + data.hits[hit].suggestion + "</a></i>");
                            }
                            else
                            {
                                list.push("<i><a href=\"/@Model.PageUrl?search=" + data.hits[hit].suggestion + "\">" + data.hits[hit].suggestion + "</a></i>");
                            }
                        }
                        if (list.length > 0)
                            document.getElementById("suggestion").innerHTML =
                              "<span style=\"color: red;\">@Html.Translate("/searchpagetemplate/peoplealsosearchedfor")</span>" + ": " + list.join(" ");
                        if (listStats.length > 0)
                            document.getElementById("suggestion2").innerHTML =
                            "<span style=\"color: red;\">People also searched for:</span> " + listStats.join(" ");
                    }
                }
            });
        }

        $(function () {
            $("#srchTxt").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Model.PublicProxyPath" + "/_autocomplete?prefix=" + request.term + "&size=5",
                        dataType: "jsonp",
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            response($.map(data.hits, function (item) {
                                return {
                                    label: item.query,
                                    value: item.query
                                };
                            }));
                        }
                    });
                },
                minLength: 2
            });
        });
</script>
<section class="main-container">
    <div class="container">
        <div class="row">
            <div class="col-sm-12 full search-form">
                <h1 class="heading-title">@Html.PropertyFor(m => m.CurrentContent.Heading)</h1>

                @*We use GET to submit the form to enable bookmarking etc of search results.  However, as GET will remove other
                    query string values not in the form we can't use that in edit mode.*@
                @using (Html.BeginForm(null, null, Model.Layout.SearchPageRouteValues, PageEditing.PageIsInEditMode ? FormMethod.Post : FormMethod.Get))
                {
                    <div class="input-group">
            <input id="srchTxt" type="text" class="form-control" tabindex="1" name="search" value="@Model.Query">
                        <span class="input-group-btn">
                            <input type="submit" tabindex="2" class="input-group-btn btnSearch" value="@Html.Translate("/searchpagetemplate/searchbutton")" />
                        </span>
                    </div><!-- /input-group -->
                }
            </div>

        </div>
        <div class="row">
            @*Main area*@
            <div class="ccol-sm-12">

                @if (Model.Hits != null)
                {
                    @*<div class="row">*@
                    <div class="span8 grayHead">
                        <h2>@Html.Translate("/searchpagetemplate/result")</h2>
                        <p>
                            @Html.Translate("/searchpagetemplate/searchfor") <i>@Model.Query</i>
                            @Html.Translate("/searchpagetemplate/resultedin")
                            @if (Model.NumberOfHits > 0)
                            {
                                @Model.NumberOfHits
                                @Html.Raw(" ")
                                @Html.Translate("/searchpagetemplate/hits")
                            }
                            else
                            {
                                @Html.Translate("/searchpagetemplate/zero")

                                <script type="text/javascript">spellcheck("@Model.Query", @Model.NumberOfHits);</script>
                            }

                            <script type="text/javascript">relatedQuery("@Model.Query", @Model.NumberOfHits);</script>

                            @*@Html.Translate("/searchpagetemplate/hits")*@

                            <div id="suggestion"></div>
                            <div id="suggestion2"></div>

                        </p>
                    </div>



                    <div class="col-sm-12 SearchResults">
                        @foreach (var hit in Model.Hits)
                        {
                            @*<div class="listResult" style="@(hit.HasBestBetStyle() ? "border: dotted; color: red; border-width: 2px;" : "") ">*@
                            <div class="listResult" style="@(hit.HasBestBetStyle() ? "background-color: #CCE6FC;" : "") ">
                                <h3><a href="@hit.Url">@Html.Raw(@hit.Title)</a></h3>

                                <p>
                                    @*<%-- If an image exists and the editor has specified that images should be shown --%>
                                        <%-- by specifying a height for them we show it and let the browser scale the width --%>
                                        <%-- relative to the height. In a real scenario we should use an image scaling library. --%>*@
                                    @if (hit.ImageUri != null && Model.CurrentContent.HitImagesHeight > 0)
                                    {
                                        <img src="@hit.ImageUri.ToString()" height="@Model.CurrentContent.HitImagesHeight" />
                                    }
                                    @*                    <%-- Show the excerpt text. As it may contain HTML tags for highlighting we --%>
                                        <%-- don't HTML encode it. --%>*@
                                    @Html.Raw(@hit.Excerpt)
                                </p>

                                <hr />
                            </div>
                        }
                    </div>

                    @* Display paging controls.*@
                    <div class="col-sm-12 pagination pagination-centered">
                        <ul>
                            @*Link to the previous paging page.*@
                            @*<li @Model.PagingPage == 1 ? class="disabled" : "active">*@
                            <li>
                                <a href="@Model.GetPagingUrl(@Model.PagingPage - 1)">&laquo; </a>
                            </li>

                            @*Display links for each specific paging page.*@
                            @for (int pageNumber = 1; pageNumber <= @Model.TotalPagingPages; pageNumber++)
                            {

                                @*<li @Model.PagingPage == @pageNumber ? class=active : "disabled" >*@
                                <li>
                                    <a href="@Model.GetPagingUrl(@pageNumber)"> @pageNumber </a>
                                </li>
                            }


                            @*Link to the next paging page *@
                            @*                    <li @Model.PagingPage == @Model.TotalPagingPages ? class="disabled" : "" >*@
                            <li>
                                <a href="@Model.GetPagingUrl(@Model.PagingPage+1)">&raquo;</a>
                            </li>
                        </ul>
                    </div>
                    @*End of search results area. *@
                    @*</div>*@

                }

            </div>
        </div>
    </div>
</section>



@section RelatedContent
{
    @*Right hand bar*@
    <div>

        @if (Model != null && Model.Hits != null && Model.Hits.TotalMatching > 0)
        {
            @*-- Sidebar in which facets/filter are shown. *@

            @*Sections Facet*@
            <div class="well block">
                <h2>Sections</h2>
                <ul class="nav nav-list">

                    @*Link for clearing section filter.*@
                    <li "@string.IsNullOrWhiteSpace(@Model.SectionFilter) ? class=\" active\" "" " >
                    <li>
                        <a href=" @Model.GetSectionGroupUrl("") ">
                            All (@Model.Hits.FilterFacet("AllSections").Count)
                        </a>
                    </li>

                    @foreach (var sectionGroup in Model.Hits.TermsFacetFor(x => x.SearchSection))
                    {
                        @*<li "@Model.SectionFilter == @sectionGroup.Term ?" class="active" : "" >*@
                        <li>
                            <a href="@Model.GetSectionGroupUrl(sectionGroup.Term)">
                                @if (@Model.SectionFilter == @sectionGroup.Term)
                                {
                                    <strong>@sectionGroup.Term (@sectionGroup.Count)</strong>
                                }
                                else
                                {
                                    <span>@sectionGroup.Term (@sectionGroup.Count)</span>
                                }
                            </a>
                        </li>

                    }

                    @*<%-- Display number of hits per section with link for filtering by section. --%>*@

                </ul>
            </div>


            @*-- End of sidebar. --*@
        }

    </div>
}